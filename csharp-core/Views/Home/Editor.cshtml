@{
    Layout = null;
}

@model FileModel

<!DOCTYPE html>

<html>
<head runat="server">
    @await Html.PartialAsync("EditorMetatagsPartial")
    <link rel="icon" href="@Url.Content("~/img/" + @Model.DocumentType + ".ico")" type="image/x-icon" />
    <title>@Model.FileName - ONLYOFFICE</title>
    @await Html.PartialAsync("EditorCssPartial")

</head>
<body>
    <div class="form">
        <div id="iframeEditor">
        </div>
    </div>
    <script src="@Startup.AppSettings["files.docservice.url.site"]@Startup.AppSettings["files.docservice.url.api"]"></script>

    <script type="text/javascript" language="javascript">

        var docEditor;

        var innerAlert = function (message) {
            if (console && console.log)
                console.log(message);
        };

        // the application is loaded into the browser
        var onAppReady = function () {
            innerAlert("Document editor ready");
        };

        // the document is modified
        var onDocumentStateChange = function (event) {
            var title = document.title.replace(/\*$/g, "");
            document.title = title + (event.data ? "*" : "");
        };

        // the user is trying to switch the document from the viewing into the editing mode
        var onRequestEditRights = function () {
            location.href = location.href.replace(RegExp("editorsMode=view\&?", "i"), "");
        };

        // an error or some other specific event occurs
        var onError = function (event) {
            if (event)
                innerAlert(event.data);
        };

        // the document is opened for editing with the old document.key value
        var onOutdatedVersion = function (event) {
            location.reload(true);
        };

        // replace the link to the document which contains a bookmark
        var replaceActionLink = function(href, linkParam) {
            var link;
            var actionIndex = href.indexOf("&actionLink=");
            if (actionIndex != -1) {
                var endIndex = href.indexOf("&", actionIndex + "&actionLink=".length);
                if (endIndex != -1) {
                    link = href.substring(0, actionIndex) + href.substring(endIndex) + "&actionLink=" + encodeURIComponent(linkParam);
                } else {
                    link = href.substring(0, actionIndex) + "&actionLink=" + encodeURIComponent(linkParam);
                }
            } else {
                link = href + "&actionLink=" + encodeURIComponent(linkParam);
            }
            return link;
        }

        // the user is trying to get link for opening the document which contains a bookmark, scrolling to the bookmark position
        var onMakeActionLink = function (event) {
            var actionData = event.data;
            var linkParam = JSON.stringify(actionData);
            docEditor.setActionLink(replaceActionLink(location.href, linkParam));  // set the link to the document which contains a bookmark
        };

        // the meta information of the document is changed via the meta command
        var onMetaChange = function (event) {
            var favorite = !!event.data.favorite;
            var title = document.title.replace(/^\☆/g, "");
            document.title = (favorite ? "☆" : "") + title;
            docEditor.setFavorite(favorite);  // change the Favorite icon state
        };

        // the user is trying to insert an image by clicking the Image from Storage button
        var onRequestInsertImage = function (event) {
            @{string logoUrl;
                Model.GetLogoConfig(out logoUrl);}
            docEditor.insertImage({  // insert an image into the file
                "c": event.data.c,
                @Html.Raw(logoUrl)
            })
        };

        // the user is trying to select document for comparing by clicking the Document from Storage button
        var onRequestCompareFile = function () {
            @{string compareFileData;
                Model.GetCompareFileData(out compareFileData);}
            docEditor.setRevisedFile(@Html.Raw(compareFileData));  // select a document for comparing
        };

        // the user is trying to select recipients data by clicking the Mail merge button
            var onRequestMailMergeRecipients = function (event) {
            @{ string dataMailMergeRecipients;
                Model.GetMailMergeConfig(out dataMailMergeRecipients); }
            docEditor.setMailMergeRecipients(@Html.Raw(dataMailMergeRecipients));  // insert recipient data for mail merge into the file
        };

        var config = @Html.Raw(Model.GetDocConfig(Context, Url));

        config.width = "100%";
        config.height = "100%";

        config.events = {
            'onAppReady': onAppReady,
            'onDocumentStateChange': onDocumentStateChange,
            'onRequestEditRights': onRequestEditRights,
            'onError': onError,
            'onOutdatedVersion': onOutdatedVersion,
            "onMakeActionLink": onMakeActionLink,
            "onMetaChange": onMetaChange,
            "onRequestInsertImage": onRequestInsertImage,
            "onRequestCompareFile": onRequestCompareFile,
            "onRequestMailMergeRecipients": onRequestMailMergeRecipients,
        };
        @{ string hist, histData; }
        @{ Model.GetHistory(out hist, out histData); }
        @{ if (!string.IsNullOrEmpty(hist) && !string.IsNullOrEmpty(histData)) }
        {
            // the user is trying to show the document version history
            config.events['onRequestHistory'] = function () {
                docEditor.refreshHistory(@Html.Raw(hist));  // show the document version history
            };
            // the user is trying to click the specific document version in the document version history
            config.events['onRequestHistoryData'] = function (event) {
                var ver = event.data;
                var histData = @Html.Raw(histData);
                docEditor.setHistoryData(histData[ver - 1]);  // send the link to the document for viewing the version history
            };
            // the user is trying to go back to the document from viewing the document version history
                config.events['onRequestHistoryClose '] = function () {
                document.location.reload();
            };
        }

        @{ string usersForMentions; }
        @{ Model.GetUsersMentions(Context.Request, out usersForMentions); }
        @{ if (!string.IsNullOrEmpty(usersForMentions)) }
        {
            // add mentions for not anonymous users
            config.events['onRequestUsers'] = function () {
                docEditor.setUsers({
                    "users": @Html.Raw(usersForMentions)
                });
            };
            config.events['onRequestSendNotify'] = function (event) {
                var actionLink = JSON.stringify(event.data.actionLink);
                console.log("onRequestSendNotify:");
                console.log(event.data);
                console.log("Link to comment: " + replaceActionLink(location.href, actionLink));
            };
        }

        var сonnectEditor = function () {
            docEditor = new DocsAPI.DocEditor("iframeEditor", config);
        };

        if (window.addEventListener) {
            window.addEventListener("load", сonnectEditor);
        } else if (window.attachEvent) {
            window.attachEvent("load", сonnectEditor);
        }

    </script>
</body>
</html>
